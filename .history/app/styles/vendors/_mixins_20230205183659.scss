// Mixins
// --------------------------

@mixin fa-icon {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
}

@mixin fa-icon-rotate($degrees, $rotation) {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation})";
  transform: rotate($degrees);
}

@mixin fa-icon-flip($horiz, $vert, $rotation) {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=#{$rotation}, mirror=1)";
  transform: scale($horiz, $vert);
}

// Only display content to screen readers. A la Bootstrap 4.
//
// See: http://a11yproject.com/posts/how-to-hide-content/

@mixin sr-only {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Use in conjunction with .sr-only to only display content when it's focused.
//
// Useful for "Skip to main content" links; see http://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1
//
// Credit: HTML5 Boilerplate

@mixin sr-only-focusable {
  &:active,
  &:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
  }
}

@mixin size($width: 100px, $height: $width) {
  height: $height;
  width: $width;
}

// absolute center
@mixin absoluteCenter($direction: "both", $position: absolute) {
  position: $position;
  @if $direction == "left" {
    left: 50%;
    transform: translateX(-50%);
  }

  @if $direction == "right" {
    right: 50%;
    transform: translateY(-50%);
  }

  @if $direction == "top" {
    top: 50%;
    transform: translateY(-50%);
  }

  @if $direction == "both" {
    right: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}
/*
- center theo trục x
position : absolute
left :50%
transition: translateX(-50%)
- center theo truc y
position : absolute
right :50%
transition: translateY(-50%)
- center theo x và y
position : absolute
right :50%
left:50%
transition: translate(-50%,-50%)

*/

@mixin bg($color: red) {
  background-color: $color;
}

// absolute full
@mixin absoluteFull {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// mixin max-width
@mixin maxWidth($breakpoint) {
  @media screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin minWidth($breakpoint) {
  @media screen and (min-width: $breakpoint) {
    @content;
  }
}

@mixin textClamp($row: 1, $size: 100%) {
  display: -webkit-box;
  -webkit-line-clamp: $row;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  width: $size;
  max-width: $size;
  white-space: pre-wrap;
  word-break: break-all;
}

@mixin flexbox(
  $align-items: stretch,
  $justify-content: flex-start,
  $direction: row,
  $flex: flex,
  $wrap: nowrap
) {
  display: $flex;
  flex-direction: $direction;
  justify-content: $justify-content;
  align-items: $align-items;
  flex-wrap: $wrap;
}

// hide scroll
@mixin hideScroll() {
  -ms-overflow-style: none;
  scrollbar-width: none;
  &::-webkit-scrollbar {
    display: none;
  }
}

@mixin hoverEffect($itemClass, $contentClass, $transform: "true") {
  #{$itemClass} {
    position: relative;
    z-index: 1;
    transition: transform 0.25s linear;

    #{$contentClass} {
      @include flexbox(center, center, column);
      @include absoluteFull();
      opacity: 0;
      visibility: hidden;
      transform: all 0.25s linear;
      background: linear-gradient(
        to bottom,
        rgba($primary-color, 0.8),
        rgba($secondary-color, 0.8)
      );
    }

    @if $transform == "true" {
      &::after {
        content: "";
        @include absoluteFull();
        @include bg($third-color);
        transition: transform 0.25s linear;
        z-index: -1;
      }
    }

    &:hover {
      transform: translate(-1rem, -1rem);
      #{$contentClass} {
        opacity: 1;
        visibility: visible;
      }
      &::after {
        transform: translate(1rem, 1rem);
      }
    }
  }
}

@mixin touchSlider($width: 80%, $gap: 2.5rem, $padding: 1rem) {
  display: grid !important;
  justify-content: flex-start !important;
  grid-auto-columns: $width;
  grid-auto-flow: column;
  grid-template-columns: unset;
  grid-column-gap: $gap;
  overflow-x: auto;
  padding: $padding;
  scroll-snap-type: x mandatory;
  scroll-snap-stop: always;
  @include hideScroll;
  & > * {
    scroll-snap-align: center;
    width: auto;
  }
}
